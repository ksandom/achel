#!/usr/bin/php
<?php
# Achel application starter.
# Copyright (c) 2012-2018, Kevin Sandom under the GPL License. See LICENSE for full details.
 
define('programName', 'achel');
$description="Achel programming language.";
$profile=programName;

define('configDir', './live');
define('docsDir', './docs~');
define('storageDir', './live');
define('installType', 'inRepo');
define('binExec', './achel');

include configDir.'/core.php';

# Early processing of -q
$verbosity=0;
$shouldCache=false;
if (isset($argv[1]))
{
	$firstArg=$argv[1];
	if ($firstArg=='-q' or $firstArg=='--quiet') $verbosity=-1;
	elseif ($firstArg=='--debugStartup') $verbosity=4;
	elseif ($firstArg=='--noCache') $shouldCache=false;
}


# initiate core
$core=core::assert($verbosity);
$cacheDir=configDir.'/profiles/'.$profile.'/cache';
$core->set('General', 'EOL', "\n");
$core->set('General', 'configDir', configDir);
$core->set('General', 'cacheDir', $cacheDir);
$core->set('General', 'docsDir', docsDir);
$core->set('General', 'storageDir', storageDir);
$core->set('General', 'installType', installType);
$core->set('General', 'binExec', binExec);
$core->set('General', 'profile', $profile);
$core->set('General', 'hostsDir', storageDir.'/data/1LayerHosts');
$core->set('General', 'programName', programName);
$core->set('General', 'description', $description);
$core->set('General', 'delayProcessingArgs', true);
$core->set('General', 'exitCode', 0);


# Process cache
$core->debug($this->l1, "Cache manually disabled. This should only be used for debugging purposes. If you need it for every-day usage, that is a bug. Please report it.");
$core->set('General', 'cache', 'false');
$core->set('General', 'noCacheReason', 'Manually disabled with by using the uncached version of the application.');

include (configDir.'/interfaces/commandLine.php');
$core->setRef('CommandLine', 'arguments', $argv);
loadModules($core, configDir."/profiles/$profile/modules");
$core->callFeature("triggerEvent", "Achel,interfaceStartup");
$core->callFeature("registerForEvent", "Achel,finishLate,outNow");

# Make it happen!
$core->go();

# We're finished, return an exit code to the command line.
$exitCode=$core->get('General', 'exitCode');
if (is_numeric($exitCode))
{
	exit(intval($exitCode));
}

?>
