# Asserts that the current value is within the specified range. This is useful when something may have put the value out of bounds. --assertRange=[min[,center[,max]]] . If any of the parameters are missing, -1,0,1 are assumed respectively. ~ BalanceM2N,validation,range,conversion

set Tmp,rangeConvertMin,~!Global,assertRange-0!~
if ~!Tmp,rangeConvertMin!~,==,,
	set Tmp,rangeConvertMin,-1

set Tmp,rangeConvertCenter,~!Global,assertRange-1!~
if ~!Tmp,rangeConvertCenter!~,==,,
	set Tmp,rangeConvertCenter,0

set Tmp,rangeConvertMax,~!Global,assertRange-2!~
if ~!Tmp,rangeConvertMax!~,==,,
	set Tmp,rangeConvertMax,1


# TODO This should probably be re-factored at some point since rangeConvert is heavier than it needs to be for this purpose.

rangeConvert Tmp,assertRangeValue,~!BalanceM2N,current,value!~,~!Tmp,rangeConvertMin!~,~!Tmp,rangeConvertCenter!~,~!Tmp,rangeConvertMax!~,~!Tmp,rangeConvertMin!~,~!Tmp,rangeConvertCenter!~,~!Tmp,rangeConvertMax!~
setNested BalanceM2N,current,value,~!Tmp,assertRangeValue!~

unset Tmp,assertRangeValue
unset Tmp,rangeConvertMin
unset Tmp,rangeConvertCenter
unset Tmp,rangeConvertMax
