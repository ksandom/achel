# Tests for how the pipes are processed. ~ hidden,unitTest,pipes

# NOTE: All/most of the tests in this file will use what looks like the legacy method for testing faucets. This is intentional to precisely test a known bug that occurs at a specific moment. This is almost never needed for testing logic and should not be taken as an example for how to write tests in Achel.

set PipeTestAbstraction,testFramework,
	parameters featureName
	
	createMetaFaucet testContainer
	createNullFaucet null
	createDumpFaucet dump,PipeTest
	
	createPipe testContainer,dump
	createPipe dunp,null
	
	changeFaucet testContainer

	callFeatureNoReturn ~!Local,featureName!~

	changeFaucet ..

	deliver testContainer,default,test1
	deliver testContainer,default,test2

	deliverAll 10
	
	getCategory PipeTest
	countToVar Local,count

	unsetCategory PipeTest
	
	if ~!Local,count!~,==,2,
		passTest
	else
		failTest Got the wrong number of results (~!Local,count!~)

set PipeTestAbstraction,makeMoreMeta,
	parameters nextLevel
	
	createMetaFaucet meta
	createPipe .,meta
	createPipe meta,.
	
	changeFaucet meta
	if ~!Local,nextLevel!~,!=,,
		debug 0,Calling doctor ~!Local,nextLevel!~
		callFeatureNoReturn ~!Local,nextLevel!~
	else
		createPipe .,.
	changeFaucet ..


defineTest Pipe test - foundation/through,
	# Test that the methodology works.
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createThroughFaucet through

		createPipe .,through
		createPipe through,.

defineTest Pipe test - foundation/direct,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createPipe .,.

defineTest Pipe test - foundation/direct *,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createPipe .,.,*,*

defineTest Pipe test - foundation/through *-a,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createThroughFaucet through
		
		createPipe .,through,*,*
		createPipe through,.

defineTest Pipe test - foundation/through *-b,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createThroughFaucet through
		
		createPipe .,through
		createPipe through,.,*,*

defineTest Pipe test - foundation/through *-a+b,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createThroughFaucet through
		
		createPipe .,through,*,*
		createPipe through,.,*,*

defineTest Pipe test - meta meta,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createMetaFaucet meta1
		
		createPipe .,meta1
		createPipe meta1,.
		
		changeFaucet meta1
		createPipe .,.
		changeFaucet ..

defineTest Pipe test - more meta,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
			pass
			callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~

defineTest Pipe test - way more meta,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
			callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
				callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
					callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
						callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
							callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
								callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
									callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
										callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
											callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
												callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
													callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
														callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
															callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~,,
																callFeatureNoReturn ~!PipeTestAbstraction,makeMoreMeta!~


defineTest Pipe test - double pipe,
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createPipe .,.
		createPipe .,.

defineTest Pipe test - double pipe (different types),
	callFeatureNoReturn ~!PipeTestAbstraction,testFramework!~,
		createPipe .,.,*,*
		createPipe .,.,default,default
		createPipe .,.

