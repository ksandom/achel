# Test that me scoping works. ~ unitTest,scope,hidden


# Isolated is a special category that is visiable exactly in the current nesting level.
defineTest Isolated,
	unset Isolated,test1
	set Isolated,test1,aa1
	expect aa1,~!Isolated,test1!~

defineTest Isolated - inherit forwards,
	unset Isolated,test1
	set Isolated,test1,aa1
	isolate
		expect ,~!Isolated,test1!~

defineTest Isolated - inherit backwards,
	unset Isolated,test1
	isolate
		set Isolated,test1,aa1
	expect ,~!Isolated,test1!~

defineTest Isolated - repeat,
	unset Isolated,test1
	set Isolated,test1,aa1
	expect aa1,~!Isolated,test1!~






# Me is a special category that will be visible in newer nestinng levels, but not older ones.
defineTest Me,
	unset Me,test1
	set Me,test1,aa1
	expect aa1,~!Me,test1!~

defineTest Me - inherit forwards,
	unset Me,testMeLocal
	set Me,testMeLocal,aa1
	isolate
		expect aa1,~!Me,testMeLocal!~

defineTest Me - inherit backwards,
	unset Me,test1
	isolate
		set Me,test1,aa1
	expect ,~!Me,test1!~

defineTest Me - repeat,
	unset Me,test1
	set Me,test1,aa1
	expect aa1,~!Me,test1!~

defineTest Me - return,
	unset Me,test1
	set Me,test1,aa1
	isolate
		set Me,test1,aa2
	
	if ~!Me,test1!~,==,aa1,
		failTest Got value from before nested setting.
	elseIf ~!Me,test1!~,==,aa2,
		passTest Got value from nested setting.
	else
		failTest Got something entirely unexpected: "~!Me,test1!"





# Normal is just any normal vairable without special treatment.
defineTest Normal,
	unset Normal,test1
	set Normal,test1,aa1
	expect aa1,~!Normal,test1!~

defineTest Normal - inherit forwards,
	unset Normal,test1
	set Normal,test1,aa1
	isolate
		expect aa1,~!Normal,test1!~

defineTest Normal - inherit backwards,
	unset Normal,test1
	isolate
		set Normal,test1,aa1
	expect aa1,~!Normal,test1!~

defineTest Normal - repeat,
	unset Normal,test1
	set Normal,test1,aa1
	expect aa1,~!Normal,test1!~



# Scope/availability modifications.
defineTest makeMeAvailable - not available,
	isolate
		set Me,test1,blah
	expect ,~!Me,test1!~

defineTest makeMeAvailable - available,
	isolate
		makeMeAvailable test1
		set Me,test1,blah
	expect blah,~!Me,test1!~


defineTest makeLocalAvailable - not available,
	unset Local,test1
	testDontMakeLocalAvailable blah
	expect ,~!Me,test1!~

defineTest makeLocalAvailable - available,
	unset Local,test1
	testMakeLocalAvailable blah
	expect blah,~!Local,test1!~

defineTest makeLocalAvailable - interference - integrity check 1,
	writeLocalFromOutOfScope Local,testVariable,2
	expect 3.14,~!Local,testVariable!~
	
	unset Tmp,testVariable

defineTest makeLocalAvailable - interference - integrity check 2,
	writeLocalFromOutOfScope Tmp,testVariable,3
	writeLocalFromOutOfScope Local,testVariable,2
	expect 3.14,~!Local,testVariable!~
	
	unset Tmp,testVariable

defineTest makeLocalAvailable - interference,
	verbosity 1
	debug 1,Begin
	writeLocalFromOutOfScope Local,testVariable,2
	writeLocalFromOutOfScope Tmp,testVariable,3
	expect 3.14,~!Local,testVariable!~
	
	unset Tmp,testVariable
	debug 1,End
	verbosity 0

defineTest is Local clean?,
	cleanLocalTest1
	cleanLocalTest2

defineTest is Local clean with makeLocalAvailable?,
	cleanLocalTest1B
	cleanLocalTest2

defineTest is a nested Local clean with makeLocalAvailable?,
	wrapCleanLocalTest1B
	wrapCleanLocalTest2




# Foundations for more intellegent scoping.
defineTest scopeName - set,
	if ~!General,scopeName!~,!=,,
		passTest We have a scopeName.
	else
		failTest We don't have a scopeName.

defineTest scopeName - same scope,
	set Me,startingScope,~!General,scopeName!~
	if 1,==,1,
		expect ~!Me,startingScope!~,~!General,scopeName!~

defineTest scopeName - different scope,
	set Me,startingScope,~!General,scopeName!~
	beInAnotherScope General,scopeName,~!Me,startingScope!~,!=



# Local scope. This uses more intellegent scoping.
defineTest Local set,
	unset Local,test1
	set Local,test1,aa1
	expect aa1,~!Local,test1!~

defineTest Local set - inherit forwards,
	unset Local,test1
	set Local,test1,aa1
	isolate
		expect aa1,~!Local,test1!~

defineTest Local set - inherit backwards,
	unset Local,test1
	isolate
		set Local,test1,aa1
	expect aa1,~!Local,test1!~

defineTest Local set - different scope read,
	unset Local,test1
	set Local,test1,aa1
	beInAnotherScope Local,test1,aa1,!=

defineTest Local set - different scope write,
	unset Local,test2
	setInAnotherScope Local,test2,aa2
	expect ,~!Local,test2!~

defineTest Local set - repeat,
	unset Local,test1
	set Local,test1,aa1
	expect aa1,~!Local,test1!~


defineTest Local setNested - different scope read without variable nesting,
	unset Local,test1
	setNested Local,test1,aa1
	beInAnotherScope Local,test1,aa1,!=

defineTest Local setNested - different scope read with variable nesting,
	unset Local,test1,extraLevel
	setNested Local,test1,extraLevel,aa1
	beInAnotherScope Local,test1,aa1,!=,extraLevel

defineTest Local setNested without nesting,
	unset Local,test1
	setNested Local,test1,aa1
	expect aa1,~!Local,test1!~

defineTest Local setNested without nesting - inherit forwards,
	unset Local,test1
	setNested Local,test1,aa1
	isolate
		expect aa1,~!Local,test1!~

defineTest Local setNested without nesting - inherit backwards,
	unset Local,test1
	isolate
		setNested Local,test1,aa1
	expect aa1,~!Local,test1!~

defineTest Local setNested without nesting - different scope read,
	unset Local,test1
	setNested Local,test1,aa1
	beInAnotherScope Local,test1,aa1,!=

defineTest Local setNested without nesting - different scope write,
	unset Local,test2
	setInAnotherScope Local,test2,aa2
	expect ,~!Local,test2!~

defineTest Local setNested without nesting - repeat,
	unset Local,test1
	setNested Local,test1,aa1
	expect aa1,~!Local,test1!~

defineTest Local setNested with nesting,
	unset Local,test1
	setNested Local,test1,bb2,aa1
	expect aa1,~!Local,test1,bb2!~

defineTest Local setNested with nesting - inherit forwards,
	unset Local,test1
	setNested Local,test1,bb2,aa1
	isolate
		expect aa1,~!Local,test1,bb2!~

defineTest Local setNested with nesting - inherit backwards,
	unset Local,test1
	isolate
		setNested Local,test1,bb2,aa1
	expect aa1,~!Local,test1,bb2!~

defineTest Local setNested with nesting - different scope read,
	unset Local,test1
	setNested Local,test1,bb2,aa1
	beInAnotherScope Local,test1,aa1,!=

defineTest Local setNested with nesting - different scope write,
	unset Local,test2
	setInAnotherScope Local,test2,aa2,bb2
	expect ,~!Local,test2!~

defineTest Local setNested with nesting - repeat,
	unset Local,test1
	setNested Local,test1,bb2,aa1
	expect aa1,~!Local,test1,bb2!~

defineTest Local setNested overwrite bug,
	unset Local,test1
	setNested Local,test1,bb1,aa1
	setNested Local,test1,bb2,aa2
	expect aa1-aa2,~!Local,test1,bb1!~-~!Local,test1,bb2!~

defineTest Me setNested overwrite bug,
	unset Me,test1
	set Me,test1,make sure the variable is available in the current nesting level.
	setNested Me,test1,bb1,aa1
	setNested Me,test1,bb2,aa2
	expect aa1-aa2,~!Me,test1,bb1!~-~!Me,test1,bb2!~

defineTest Normal setNested overwrite bug,
	unset Normal,test1
	setNested Normal,test1,bb1,aa1
	setNested Normal,test1,bb2,aa2
	expect aa1-aa2,~!Normal,test1,bb1!~-~!Normal,test1,bb2!~


defineTest Normal unset - integrity check,
	set Tmp,unsetTest,aa1
	
	expect aa1,~!Tmp,unsetTest!~
	unset Tmp,unsetTest

defineTest Normal unset,
	set Tmp,unsetTest,aa1
	unset Tmp,unsetTest
	
	expect ,~!Tmp,unsetTest!~

defineTest Isolated unset,
	set Isolated,unsetTest,aa1
	unset Isolated,unsetTest
	
	expect ,~!Isolated,unsetTest!~

defineTest Me unset,
	set Me,unsetTest,aa1
	unset Me,unsetTest
	
	expect ,~!Me,unsetTest!~

defineTest Local unset - integrity check,
	set Local,unsetTest,aa1
	
	expect aa1,~!Local,unsetTest!~
	unset Local,unsetTest

defineTest Local unset,
	set Local,unsetTest,aa1
	unset Local,unsetTest
	
	expect ,~!Local,unsetTest!~


