# Run unit tests for TimeThing ~ timething,unitTest

# # Sample data set
#  _1389830400: 
#    name: lastWeek
#    ts: 1389830400
#    fuzzyTime: 2014-01-16--0:00:00
#  _1390348800: 
#    name: yesterday
#    ts: 1390348800
#    fuzzyTime: 2014-01-22--0:00:00
#  _1390435200: 
#    name: todayMidnight
#    ts: 1390435200
#    fuzzyTime: 2014-01-23--0:00:00
#  _1390488283: 
#    name: now
#    ts: 1390488283
#    fuzzyTime: 2014-01-23--14:44:43
#  _1391040000: 
#    name: nextWeek
#    ts: 1391040000
#    fuzzyTime: 2014-01-30--0:00:00


defineTest TimeThing - tsDay/today,
	failTest ~!Tmp,wrongNumberMessage!~ "~!Tmp,defineTest-description!~".
	getTSDemoData
	tsDay 0,,ts
	expectNumberOfResults 2,~!Tmp,defineTest-description!~,name,(today|now),
		passTest yay

defineTest TimeThing - tsDay/yesterday,
	failTest ~!Tmp,wrongNumberMessage!~ "~!Tmp,defineTest-description!~".
	getTSDemoData
	tsDay 1,,ts
	expectNumberOfResults 1,~!Tmp,defineTest-description!~,name,yesterday,
		passTest yay

defineTest TimeThing - tsDay/tomorrow,
	failTest ~!Tmp,wrongNumberMessage!~ "~!Tmp,defineTest-description!~".
	getTSDemoData
	tsDay -1,,ts
	expectNumberOfResults 0,~!Tmp,defineTest-description!~,name,tomorrow,
		passTest yay

defineTest TimeThing - tsDay/yesterday and today,
	failTest ~!Tmp,wrongNumberMessage!~ "~!Tmp,defineTest-description!~".
	getTSDemoData
	tsDay 1,2,ts
	expectNumberOfResults 3,~!Tmp,defineTest-description!~,name,(yesterday|today|now),
		passTest yay
