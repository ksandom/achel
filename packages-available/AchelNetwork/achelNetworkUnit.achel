# Unit tests for achelNetwork ~ network,unitTest,hidden

defineTest network - can send/recieve message while binding to 127.0.0.1,
	# create a listener
	createSocketServerFaucet serverSocket,achelNetworkUnitConnect,achelNetworkUnitDisconnect,,12345,127.0.0.1
	deliver serverSocket,_control,inEOL n
	deliver serverSocket,_control,outEOL n
	createNullFaucet null
	createPipe serverSocket,null

	# create a destination
	createSemiInlineCallFaucet destination,achelNetworkUnitDestination,
	createPipe destination,null
	
	# create a client connection
	createSocketClientFaucet clientSocket,,,,12345,127.0.0.1
	deliver clientSocket,_control,inEOL n
	deliver clientSocket,_control,outEOL n
	
	# Make sure the server know about the connection. The server socket only checks for new connections when it it polled for new data. We normally wouldn't have to worry about this because the timer would get it. But because we are running this test non-interruptable, we have to invoke the deliverAll.
	deliverAll
	
	# send something through
	deliver clientSocket,default,correctValue
	
	# invoke delivery
	deliverAll
	
	# test that it arrived
	if ~!UnitNetwork,destination!~,==,,
		failTest Got no value.
	elseIf ~!UnitNetwork,destination!~,==,correctValue,
		passTest Got correct value.
	else
		failTest Got incorrect value "~!UnitNetwork,destination!~".
	
	# Clean up
	unset UnitNetwork,destination
	deleteFaucet serverSocket
	deleteFaucet clientSocket
	deleteFaucet destination
	deleteFaucet null
	deliverAll


defineTest network - handelConnect,
	set Test,inner,
		pwd Test,result
	
	createMetaFaucet testEnv,
		createMetaFaucet thing1,
			createMetaFaucet thing2,
				createMetaFaucet thing3,
					pass
	
	set Me,ID,blahish
	
	setNested Network,~!Me,ID!~,ID,~!Me,ID!~
	setNested Network,~!Me,ID!~,type,client
	setNested Network,~!Me,ID!~,address,anAddress
	setNested Network,~!Me,ID!~,port,aPort
	setNested Network,~!Me,ID!~,eventFeature,~!Test,inner!~
	setNested Network,~!Me,ID!~,faucet,/testEnv/thing1/thing2/thing3
	
	handleConnect ~!Me,ID!~,123
	
	expect /testEnv/thing1/thing2/thing3,~!Test,result!~

	deleteFaucet testEnv


defineTest network - simpleFaucet - forward,
	testFaucets
		createSimpleNetworkServerFaucet server1,localhost,22005,
			parameters ID,channel
			getPipes
			nested
			outNow
			# TODO potentially miss-matching channel
			debug 0,GOT HERE server channel=~!Local,channel!~
			createPipe .,network,in,~!Local,channel!~
			createPipe network,.,~!Local,channel!~,out
			pwd
			getPipes
			nested
			outNow
		
		createSimpleNetworkClientFaucet client1,localhost,22005,
			parameters ID,channel
			
			getPipes
			nested
			outNow
			debug 0,GOT HERE client channel=~!Local,channel!~
			createPipe .,network,in,~!Local,channel!~
			createPipe network,.,~!Local,channel!~,out
			pwd
			getPipes
			nested
			outNow
		
		createPipe server1,client1,out,in
		createPipe client1,.,default
		
		deliver server1,in,forward
	
	expect forward,~!Test,default,0!~
	getCategory Test
	nested
	outNow


pass
	defineTest network - simpleFaucet - reverse,
		testFaucets
			createSimpleNetworkServerFaucet server,localhost,22006,
				parameters ID,channel
				debug 0,ID=~!Local,ID!~ channel=~!Local,channel!~
				
				# TODO check that this is right
				
				createPipe .,network,in,~!Local,channel!~
				createPipe network,.,~!Local,channel!~,out
			
			createSimpleNetworkClientFaucet client,localhost,22006,
				parameters ID,channel
				debug 0,ID=~!Local,ID!~ channel=~!Local,channel!~
				
				createPipe .,network,in,~!Local,channel!~
				createPipe network,.,~!Local,channel!~,out
			
			createNullFaucet null
			
			createPipe client,server,out,in
			createPipe server,.,out
			
			deliver client,in,reverse
		
		expect reverse,~!Test,default,0!~


