#!/usr/bin/php
<?php
/*
 * Some temporary unit tests.
 * TODO Look into php unit tests for testing non-exposed functionality like this.
*/

$verbosity=1;


include '../../src/core.php';
include '../AAFaucets/achel.php';
include 'balance.php';
$core=core::assert($verbosity);

$algorythm = new BalanceAlgorithm();
$algorythm->setCore($core);

include ('../../interfaces/commandLine.php');
$core->callFeature('registerForEvent','Int,resetOutput,setCliOutput');

function expect($input, $expectedValue, $label='')
{
	if ($input == $expectedValue)
	{
		echo "    pass $expectedValue\n";
	}
	else
	{
		echo "    FAIL: $input != $expectedValue ($label)\n";
	}
}


// $value, $inMin, $inCenter, $inMax, $outMin=-1, $outCenter=0, $outMax=1
expect($algorythm->scaleData(45, -90, 0, 90), 0.5);
expect($algorythm->scaleData(-45, -90, 0, 90), -0.5);
expect($algorythm->scaleData(0, -90, 0, 90), 0);
expect($algorythm->scaleData(0, -45, 0, 45), 0);

expect($algorythm->scaleData(45, 90, 0, -90), -0.5);
expect($algorythm->scaleData(-45, 90, 0, -90), 0.5);
expect($algorythm->scaleData(0, 90, 0, -90), 0);
expect($algorythm->scaleData(0, 45, 0, -45), 0);

expect($algorythm->scaleData(190, -90, 0, 90), 1);
expect($algorythm->scaleData(-190, -90, 0, 90), -1);
expect($algorythm->scaleData(190, -90, 0, 90), 1);
expect($algorythm->scaleData(-190, -90, 0, 90), -1);

expect($algorythm->scaleData(-10, -10, 0, 10), -1);
expect($algorythm->scaleData(-9, -10, 0, 10), -0.9);
expect($algorythm->scaleData(-8, -10, 0, 10), -0.8);
expect($algorythm->scaleData(-7, -10, 0, 10), -0.7);
expect($algorythm->scaleData(-6, -10, 0, 10), -0.6);
expect($algorythm->scaleData(-5, -10, 0, 10), -0.5);
expect($algorythm->scaleData(-4, -10, 0, 10), -0.4);
expect($algorythm->scaleData(-3, -10, 0, 10), -0.3);
expect($algorythm->scaleData(-2, -10, 0, 10), -0.2);
expect($algorythm->scaleData(-1, -10, 0, 10), -0.1);
expect($algorythm->scaleData(0, -10, 0, 10), 0);
expect($algorythm->scaleData(1, -10, 0, 10), 0.1);
expect($algorythm->scaleData(2, -10, 0, 10), 0.2);
expect($algorythm->scaleData(3, -10, 0, 10), 0.3);
expect($algorythm->scaleData(4, -10, 0, 10), 0.4);
expect($algorythm->scaleData(5, -10, 0, 10), 0.5);
expect($algorythm->scaleData(6, -10, 0, 10), 0.6);
expect($algorythm->scaleData(7, -10, 0, 10), 0.7);
expect($algorythm->scaleData(8, -10, 0, 10), 0.8);
expect($algorythm->scaleData(9, -10, 0, 10), 0.9);
expect($algorythm->scaleData(10, -10, 0, 10), 1);



// $goal, $incrementorPercent, $ruleName, $differenceName
expect($algorythm->getSomeDifference(0, 0.75, 'test', 'test1'), 0);
expect($algorythm->getSomeDifference(0, 0.5, 'test', 'test2'), 0);
expect($algorythm->getSomeDifference(1, 0.75, 'test', 'test1'), 0.75);
expect($algorythm->getSomeDifference(1, 0.5, 'test', 'test2'), 0.5);
expect($algorythm->getSomeDifference(1, 0.5, 'test', 'test2'), 0.75);
expect($algorythm->getSomeDifference(1, 0.5, 'test', 'test2'), 0.875);



$tdh = new TimedDataHistory(4, 0.01);
// Test setting/discarding values with and without the interval.
expect($tdh->addItem(1), true);
expect($tdh->addItem(2), false);
usleep(20000);
expect($tdh->addItem(2), true);
usleep(20000);
expect($tdh->addItem(3), true);
usleep(20000);
expect($tdh->addItem(4), true);

// Test that all values have been set as expected.
expect($tdh->item(), 4);
expect($tdh->item(0), 4);
expect($tdh->item(-1), 3);
expect($tdh->item(-2), 2);
expect($tdh->item(-3), 1);
expect($tdh->item(-4), 4);
expect($tdh->item(-5), 4, 'item OOB -5');

// Test mean ranges.
expect($tdh->mean(0, 1), 3.5);
expect($tdh->mean(0, 3), 2.5);

// Test mean of the last values, and exceeding the number of data points.
expect($tdh->meanLast(2), 3.5);
expect($tdh->meanLast(4), 2.5);
expect($tdh->meanLast(6), 2.5);
expect($tdh->meanLast(1000), 2.5);

// Test overrun.
expect($tdh->iterationsUntilOverrun(5, 1), 1);
expect($tdh->iterationsUntilOverrun(6, 1), 2);
expect($tdh->iterationsUntilOverrun(6, 2), 2);

// Test looping around.
usleep(20000);
expect($tdh->addItem(4), true);
usleep(20000);
expect($tdh->addItem(4), true);
usleep(20000);
expect($tdh->addItem(4), true);
usleep(20000);
expect($tdh->addItem(4), true);

// Test that we set the values as expected.
expect($tdh->item(0), 4);
expect($tdh->item(-1), 4);
expect($tdh->item(-2), 4);
expect($tdh->item(-3), 4);

// Test progress of 0.
expect($tdh->iterationsUntilOverrun(6, 1), false);

// Test a new dataset.
usleep(20000);
expect($tdh->addItem(1), true);
usleep(20000);
expect($tdh->addItem(2), true);
usleep(20000);
expect($tdh->addItem(4), true);
usleep(20000);
expect($tdh->addItem(8), true);

// Test overrun further.
expect($tdh->iterationsUntilOverrun(16, 1), 2);
expect($tdh->iterationsUntilOverrun(17, 2), 3);
expect($tdh->iterationsUntilOverrun(36, 3), 12);

?>
