# Create a data type. action is the command that should be run with the appropriate value (defined in default, more and less). --createDataType=typeName,default,[more],[less],[action],description ~ data,definition,semantics
parameters {"dataTypeName":"","defaultTemplate":"","moreTemplate":"","lessTemplate":"","action":"templateOut","description":""}

# TODO Document this further.

# Apply defaults if necessary
# TODO When parameters is able to take inter-referencial defaults, these should be used instead.
setIfNothing Local,moreTemplate,~!Local,defaultTemplate!~
setIfNothing Local,lessTemplate,~!Local,defaultTemplate!~

# Set the details and cleanup
setNested Semantics,dataTypes,~!Local,dataTypeName!~,dataTypeName,~!Local,dataTypeName!~
setNested Semantics,dataTypes,~!Local,dataTypeName!~,default,~!Local,defaultTemplate!~
setNested Semantics,dataTypes,~!Local,dataTypeName!~,more,~!Local,moreTemplate!~
setNested Semantics,dataTypes,~!Local,dataTypeName!~,less,~!Local,lessTemplate!~
setNested Semantics,dataTypes,~!Local,dataTypeName!~,action,~!Local,action!~
setNested Semantics,dataTypes,~!Local,dataTypeName!~,description,~!Local,description!~

retrieveResults Semantics,dataTypes

# Save the result out
registerForEvent Achel,finishGeneral,saveSemantics
