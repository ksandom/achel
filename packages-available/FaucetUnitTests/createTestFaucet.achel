# Create a faucet for recieving results during unit testing --createTestFaucet=uniqueResultName,description,(expect|expectNot),expectedResult . ~ faucet,unit
parameters name,description,action,expectedResult
escapeForJson Local,resultName,~!Local,description!~

# Derive globallyUnique test name so that final results will not clash.
setNested FaucetUnit,currentTest,currentResult,name,~!FaucetUnit,currentTest,description!~/~!Local,name!~

# Register the test so that its results are required before the test set can exit.
registerTest ~!FaucetUnit,currentTest,currentResult,name!~

# Register details for tracking when the tests have completed.
setNested FaucetUnitTests,~!FaucetUnit,currentTest,currentResult,name!~,expectedResult,~!Local,expectedResult!~

if ~!Local,action!~,==,expect,
	setNested FaucetUnitTests,~!FaucetUnit,currentTest,currentResult,name!~,action,==
elseIf ~!Local,action!~,==,expectNot,
	setNested FaucetUnitTests,~!FaucetUnit,currentTest,currentResult,name!~,action,!=
else
	debug 0,No action/condition set for ~!FaucetUnit,currentTest,currentResult,name!~.

# Set the timeout state
setFaucetTestResult ~!FaucetUnit,currentTest,currentResult,name!~,time,Timeout.,true
set UnitResults,didExecute,true

# Test the result.
set FaucetUnit,testHandeler,
	parameters resultName,resultValue
	
	if ~!UnitResults,result,~!Local,resultName!~,hasResult!~,!=,true,
		# Get the result into a useable state.
		retrieveResults Local,resultValue
		loop
			set Local,result,~!Result,line!~
		
		# Figure out if the test passes or fails.
		if ~!Local,result!~,~!FaucetUnitTests,~!Local,resultName!~,action!~,~!FaucetUnitTests,~!Local,resultName!~,expectedResult!~,
			set Local,escapedComment,Yay! (~!Local,result!~ ~!FaucetUnitTests,~!Local,resultName!~,action!~ ~!FaucetUnitTests,~!Local,resultName!~,expectedResult!~)
			set Local,result,pass
		else
			set Local,escapedComment,Expected[~!FaucetUnit,currentTest,currentResult,name!~] ~!Local,result!~ ~!FaucetUnitTests,~!Local,resultName!~,action!~ ~!FaucetUnitTests,~!Local,resultName!~,expectedResult!~
			set Local,result,fail
		
		# Store the result
		setFaucetTestResult ~!Local,resultName!~,~!Local,result!~,~!Local,escapedComment!~
		
		# Show live output.
		if ~!UnitConfig,showTests!~,==,true,
			set Local,resultColor,~!UnitResults,~!Local,result!~Color!~
			debug 0,[~!Color,~!Local,resultColor!~!~~!Local,result!~~!Color,default!~]  ~!Color,brightBlack!~v--~!Color,default!~[~!Color,~!UnitResults,faucetColor!~!~faucet~!Color,brightBlack!~]~!Color,default!~ ~!Local,resultName!~: ~!Local,escapedComment!~
		
		unregisterTest ~!Local,resultName!~
		setNested ["UnitResults","results","~!Local,resultName!~","hasResult","true"]



	# Clean up.
	# unset FaucetUnitTests,~!Local,resultName!~

# NOTE 1 to take continual results, store the test details separately from the FaucetUnitTests category so that the results can continue to be tested after the cleanup has happened.
# NOTE 2 to take continual results up to a specified quantity this could be tracked in the test details. In both cases, this should be a separate macro to this one.

# Create faucet for recieving the result and anchor faucet to parent faucet.
createPipe ~!Local,name!~,.
create1-1CallFaucet ~!Local,name!~,~!FaucetUnit,testHandeler!~,~!FaucetUnit,currentTest,currentResult,name!~
createPipe ~!Local,name!~,.
