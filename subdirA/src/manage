#!/bin/bash
# Description
#   Brings together all the tools for managing mass
#
# Syntax:
#   $0 scriptName [parameters]
#      scriptName is one of the possible scripts listed below. Use --help with the script to find out more about it.
#
# Many of the scripts respond to
#   --short - Which only lists out what was explicitly asked for.
#   --noFormat - Which preserves the tab delimiter rather than making it pretty for the user.
#
# Examples:
#   Lists the current repos including any ssymlink infomation.
#     $0 repoList
#   Adds /usr/blah 
#     $0 repoPretend /usr/blah
#   Display the help for repo-add
#     $0 repoAdd --help
#   
#

 # The export saves called scripts from having to do this detection, and thus speeds up loading time.
export configDir='~%configDir%~'
export storageDir='~%storageDir%~'
export installType='~%installType%~'
export binExec='~%binExec%~'
export languageName='~%languageName%~'
export languageRepo='~%configDir%~/repos/~%languageName%~'

export libDir=$configDir/supplimentary/libs
export supplimentaryDir=$configDir/supplimentary

. $libDir/theLibOfLibs.sh

# Possible scripts:
extraHelp='displayListOfSupplimeentaryScripts'
requiredParms="$1"
. $libDir/help.sh

name=`echo $0 | sed 's#.*/##g'`

script=""$supplimentaryDir/$1""
if [ -f "$script" ]; then
	export scriptName="$name $1"
	shift
	
	# TODO I used to use $@, but resolved '.*' to .* . There's got to be a better way.
	"$script" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
else
	case $1 in
		'--help'|'-h')
			showHelp
		;;
		*)
			echo "Could not find \"$1\""
			showHelp
		;;
	esac
fi
